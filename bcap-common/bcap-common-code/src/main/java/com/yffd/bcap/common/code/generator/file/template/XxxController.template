package ##PACKAGE_NAME##;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.yffd.bcap.common.support.page.PageParam;
import com.yffd.bcap.common.support.page.PageResult;
import com.yffd.bcap.common.support.util.EasyStringUtils;
import com.yffd.bcap.common.web.mvc.model.RespModel;
import com.yffd.bcap.common.web.mvc.model.easyui.DataGridModel;
import ##POJO_FULL_NAME##;
import ##SERVICE_FULL_NAME##;
##IMPORT_SUPER_CLASS_FULL_NAME##

/**
 * @Description  简单描述该类的功能（可选）.
 * @Date		 ##DATE## <br/>
 * @author		 ##AUTHOR##
 * @version		 1.0
 * @since		 JDK 1.7+
 * @see 	 
 */
@RestController
@RequestMapping("##REQUEST_MAPPING##")
##CLASS_HEAD## {

	@Autowired
	private ##SERVICE_SIMPLE_NAME## ##SERVICE_ALIAS_NAME##;
	
	@RequestMapping(value="/listPage", method=RequestMethod.POST)
	public RespModel listPage(@RequestParam Map<String, Object> paramMap) {
		PageParam paramPage = this.getPageParam(paramMap);
		##POJO_SIMPLE_NAME## paramModel = this.getModelParam(paramMap, ##POJO_SIMPLE_NAME##.class);
		PageResult<##POJO_SIMPLE_NAME##> pageResult = this.##SERVICE_ALIAS_NAME##.findPage(paramModel, paramPage, getCurrentLoginInfo());
		DataGridModel dataGrid = this.toDataGrid(pageResult);
		return this.successAjax(dataGrid);
	}
	
	@RequestMapping(value="/add", method=RequestMethod.POST)
	public RespModel add(##POJO_SIMPLE_NAME## paramModel) {
		if (null == paramModel) return this.errorAjax("参数无效");
		##POJO_SIMPLE_NAME## model = new ##POJO_SIMPLE_NAME##();	// 存在校验
		// TODO
		model.setId(paramModel.getId());
		boolean exsist = this.##SERVICE_ALIAS_NAME##.exsist(model, getCurrentLoginInfo());
		if (exsist) return this.errorAjax("数据已存在");
		int result = this.##SERVICE_ALIAS_NAME##.save(paramModel, getCurrentLoginInfo());
		if (result == 0) return this.errorAjax("添加失败");
		return this.successAjax();
	}
	
	@RequestMapping(value="/update", method=RequestMethod.POST)
	public RespModel update(##POJO_SIMPLE_NAME## paramModel) {
		if (null == paramModel || EasyStringUtils.isBlank(paramModel.getId())) return this.errorAjax("参数无效");
		##POJO_SIMPLE_NAME## oldModel = new ##POJO_SIMPLE_NAME##();
		oldModel.setId(paramModel.getId());
		int result = this.##SERVICE_ALIAS_NAME##.update(paramModel, oldModel, getCurrentLoginInfo());
		if (result == 0) return this.errorAjax("更新失败");
		return this.successAjax();
	}
	
	@RequestMapping(value="/delById", method=RequestMethod.POST)
	public RespModel delById(String id) {
		if (EasyStringUtils.isBlank(id)) return this.errorAjax("参数无效");
		##POJO_SIMPLE_NAME## model = new ##POJO_SIMPLE_NAME##();
		model.setId(id);
		int result = this.##SERVICE_ALIAS_NAME##.delete(model, getCurrentLoginInfo());
		if (result == 0) return this.errorAjax("删除失败");
		return this.successAjax();
	}
	
	@RequestMapping(value="/delByIds", method=RequestMethod.POST)
	public RespModel delByIds(String ids) {
		if (EasyStringUtils.isBlank(ids)) return this.errorAjax("参数无效");
		List<String> idList = Arrays.asList(ids.split(","));
		Set<String> idSet = new HashSet<>(idList);
		int result = this.##SERVICE_ALIAS_NAME##.deleteByIds(idSet, getCurrentLoginInfo());
		if (result == 0) return this.errorAjax("删除失败");
		return this.successAjax();
	}
}
